import { useEffect, useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import CN from 'classnames'
import { useQuery } from '@apollo/client'
import _ from 'lodash'
import { format } from 'date-fns'

import { ArrowRightCircle } from 'react-feather'
import { Button } from '@/components/atoms'
import { MemberCard } from '@/components/molecules/MemberCard'
import { DashboardMenu } from '@/components/molecules/DashboardMenu'
import { AuthLayout } from '@/components/layouts'

import { useRouter } from 'next/router'
import { useViewport } from '@/utils'
import { useAppContext } from '@/context'

import { GET_FULL_USER, getUserOrders } from '../../lib/graphql'

const Page: NextPage = () => {
  const router = useRouter()
  const { isDesktop, isMobile, isTablet } = useViewport()
  const { fullUser, user, userOrders }: any = useAppContext()

  const [_subscriptions, _setSubscriptions] = useState<any>()
  const [_subscribedProducts, _setSubscribedProducts] = useState<any>()
  const [_activeSubscription, _setActiveSubscription] = useState<any>()
  const [_expiryDate, _setExpiryDate] = useState<any>()

  /* Filter and set user's active subscriptions and products */
  useEffect(() => {
    /* Subscriptions */
    let subscriptions: any = []

    if (fullUser?.activeSubscriptions) {
      subscriptions = fullUser?.activeSubscriptions?.map((subscription: any) => {
        const productsJson = subscription?.products ? JSON.parse(subscription?.products) : {}
        const dataJson = subscription?.data_json ? JSON.parse(subscription?.data_json) : {}
        const mergedSubscriptionData = {
          ...subscription,
          ...dataJson,
          ...productsJson[0],
          data_json: `stripped`,
        }

        _setSubscribedProducts(productsJson?.map((product: any) => product))
        return mergedSubscriptionData
      })
    }

    _setSubscriptions(subscriptions)
    _setActiveSubscription(subscriptions[0])
  }, [fullUser])

  useEffect(() => {
    if (_activeSubscription?.product_id === Number(process.env.NEXT_PUBLIC_SUBSCRIPTION_FREE_ID)) {
      _setExpiryDate('Never')
    }
  }, [_activeSubscription])

  const quickLinks = [
    {
      id: 0,
      label: 'Edit your password or account details',
      url: '#',
    },
    {
      id: 1,
      label: 'Manage shipping and billing address',
      url: '#',
    },
  ]

  useEffect(() => {
    console.log(`_activeSubscription`, _activeSubscription)
  }, [_activeSubscription])

  const renderMembershipCard = () => {
    return (
      <>
        <MemberCard
          name={`${user?.firstName} ${user?.lastName}`}
          email={user?.email}
          type={_activeSubscription?.name || `N/A`}
          expireDate={_expiryDate}
        />
        <p
          className='py-[12px] text-center text-md text-N-600'
          dangerouslySetInnerHTML={{
            __html: `Android? Install this <a target='_blank' href='' className='underline'>app</a> & follow this <a target='_blank' href='' className='underline'>guide</a>.`,
          }}
        />
      </>
    )
  }

  return (
    <>
      <Head>
        <title>Account Dashboard - Tesla Owners UK</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.png' />
      </Head>

      <AuthLayout>
        <div className='container gap-[48px] pb-[40px] lg:grid lg:grid-cols-[160px_4fr_1fr] lg:pb-[80px]'>
          <div className='dashboard-menu hidden lg:flex'>
            <div className='w-full'>
              <DashboardMenu />
            </div>
          </div>

          <div>
            <h4 className='text-h4 font-600 text-N-800'>Hello {`${user?.firstName}, Good Day!`}</h4>

            {isMobile && <div className='pt-[24px]'>{renderMembershipCard()}</div>}

            <div className='pt-[24px] md:pt-[40px] lg:pt-[32px]'>
              <div className='text-md font-500 text-N-800'>Membership details</div>
              <div className='flex gap-[64px] pt-[24px] text-md'>
                <div className='flex flex-col gap-[16px]'>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>Name</p>
                    <p>
                      {user?.firstName} {user?.lastName}
                    </p>
                  </div>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>Email</p>
                    <p>{user?.email}</p>
                  </div>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>Type</p>
                    <p>{_activeSubscription?.name || `N/A`}</p>
                  </div>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>ID</p>
                    <p>{_activeSubscription?.order_id}</p>
                  </div>
                </div>
                <div className='flex flex-col gap-[16px]'>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>Status</p>
                    <p
                      className={CN('font-600', {
                        'text-G-500': _activeSubscription?.status === 'active',
                        'text-R-500': _activeSubscription?.status !== 'active',
                      })}>
                      {_activeSubscription?.status}
                    </p>
                  </div>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>Start date</p>
                    <p>{_activeSubscription?.start}</p>
                  </div>
                  <div className='flex flex-col lg:flex-row'>
                    <p className='w-[80px] text-md font-500 text-N-600'>Expires on</p>
                    <p
                      className={CN('font-600', {
                        'text-B-500': _expiryDate !== 'Never',
                      })}>
                      {_expiryDate}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            <div className='flex flex-col gap-[24px] pt-0 lg:pt-[40px]'>
              <p className='text-md font-500 text-N-800'>Quick links</p>

              <ul className='flex flex-col gap-[8px]'>
                {quickLinks.map(({ id, url, label }, index) => (
                  <li key={id || index}>
                    <Link href={url}>
                      <a className='flex items-center gap-[12px] text-md'>
                        <span className='text-N-400'>{<ArrowRightCircle size={20} />}</span>
                        <p className='text-N-800 hover:text-B-500'>{label}</p>
                      </a>
                    </Link>
                  </li>
                ))}
              </ul>
            </div>

            {userOrders?.length !== 0 && (
              <>
                <div className='scrollbar-py-[12px] scrollbar-track-rounded-full scrollbar-thumb-rounded-full w-full overflow-auto overflow-y-scroll pt-[40px] scrollbar-thin scrollbar-track-N-100 scrollbar-thumb-N-300'>
                  <p className='mb-[16px] text-md text-N-600'>Recent purchases</p>

                  <ul className='flex w-[600px] flex-col gap-[8px] overflow-auto pb-[24px] md:w-[unset] lg:w-[unset]'>
                    {userOrders?.map(
                      (
                        { id, number, date_created, label, status, isCompleted }: any,
                        index: number
                      ) => (
                        <Link key={id || index} href={`/account/purchases/${number}`}>
                          <a>
                            <li
                              key={id || index}
                              className='grid grid-cols-[0.75fr_1fr_1fr_1fr] gap-[24px] rounded-[4px] border border-N-100 bg-white px-[12px] py-[4px]'>
                              <span className='text-md text-N-800'>#{number}</span>
                              <p className='text-md font-400 text-N-600'>
                                {format(new Date(date_created?.date), 'dd MMMM yyyy')}
                              </p>
                              <p
                                className={CN(`text-md font-400 text-N-800`, {
                                  'text-R-500': status === 'pending',
                                  'text-G-500': status === 'completed',
                                })}>
                                {status.replace(/^\w/, (c: any) => c.toUpperCase())}
                              </p>
                              <a className='ml-auto text-md text-N-800 hover:text-B-500'>View</a>
                            </li>
                          </a>
                        </Link>
                      )
                    )}
                  </ul>
                </div>

                <div className='pt-[24px] md:pt-[16px] lg:pt-[0]'>
                  <Link href='/account/purchases'>
                    <Button
                      iconAfter={<i className='ri-arrow-right-line text-lg' />}
                      appearance='link'
                      size='sm'>
                      View all purchases
                    </Button>
                  </Link>
                </div>
              </>
            )}
          </div>

          <div className='justify-end md:flex md:flex-row-reverse md:gap-[24px] lg:flex lg:flex-col lg:justify-start'>
            <div className='flex'>
              {!isMobile && <div className='md:w-full'>{renderMembershipCard()}</div>}
            </div>

            {/* <div className='events w-full rounded-[8px] bg-N-50 px-[24px] py-[24px] md:w-[340px] lg:w-[368px] lg:px-[32px] lg:py-[32px]'>
              <p className='mb-[16px] text-md text-N-600'>Upcoming events</p>

              <ul className='flex flex-col gap-[8px]'>
                {upcomingEventsList.map(({ id, url, label, date }, index) => (
                  <li key={id || index} className='flex justify-between'>
                    <a target='_blank' href={url} className='text-md text-N-800 hover:text-B-500'>
                      {label}
                    </a>
                    <p className='text-md text-N-800'>{date}</p>
                  </li>
                ))}
              </ul>

              <div className='pt-[8px]'>
                <Link href='/events'>
                  <Button
                    iconAfter={<i className='ri-arrow-right-line text-lg' />}
                    appearance='link'
                    size='sm'>
                    View all events
                  </Button>
                </Link>
              </div>
            </div> */}
          </div>
        </div>
      </AuthLayout>
    </>
  )
}

// export async function getStaticProps({ preview = false, previewData, user }: any) {
//   const data = await getUserOrders()

//   return {
//     props: {
//       preview,
//       orders: data,
//     },
//     revalidate: 1,
//   }
// }

export default Page
