import type { NextPage } from 'next'
import Head from 'next/head'
import { useMutation, useQuery } from '@apollo/client'
import { ExpandedProductDetails } from '@/components/sections/ExpandedProductDetails'
import { Common as CommonLayout } from '@/components/layouts'
import { ShopVideos, ShopDetails } from '@/components/sections'

import { toast } from '@/components/molecules'

import { useAppContext } from '@/context'

import { getProduct, getProducts, ADD_TO_CART } from '../../lib/graphql'

const Page: NextPage = ({ product }: any) => {
  const { refetchCart }: any = useAppContext()

  const [addToCart, { loading: loadingAddToCart }] = useMutation(ADD_TO_CART)

  const handleAddToCart = (qty: number) => {
    addToCart({
      variables: {
        productId: product.databaseId,
        quantity: qty,
      },
    })
      .then((res: any) => {
        toast({ message: `Added ${qty} item${qty > 1 ? 's' : ''} to cart`, type: 'success' })

        refetchCart().then().catch()
      })
      .catch((res: any) => {
        console.log(res)
      })
  }

  console.log(product)

  return (
    <>
      <Head>
        <title>{product?.name || 'Product'} - Tesla Owners UK</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.png' />
      </Head>

      <CommonLayout>
        <div className='container pt-[24px] md:pb-[60px]'>
          <ExpandedProductDetails
            onAddToCart={handleAddToCart}
            isLoading={loadingAddToCart}
            product={product}
          />

          {(product?.pageProduct?.features ||
            product?.pageProduct?.reviews ||
            product?.pageProduct?.videos) && (
            <div className='pt-[60px]' id='description'>
              <ShopDetails product={product} />
            </div>
          )}
        </div>
      </CommonLayout>
    </>
  )
}

export async function getStaticProps({ params, preview = false, previewData }: any) {
  const data = await getProduct(params.slug)

  return {
    props: {
      preview,
      product: data,
    },
    revalidate: 1,
  }
}

export async function getStaticPaths() {
  const allProducts = await getProducts()

  return {
    paths: allProducts?.nodes?.map(({ slug }: any) => `/shop/${slug}`) || [],
    fallback: true,
  }
}

export default Page
