import React, { FC, useState, useEffect } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { Header, Footer, SupplierRibbon } from '@/components/sections'
import { useRouter } from 'next/router'
import { PageHeaderVariant } from '@/components/molecules/PageHeaderVariant'
import { Button, TextField, DropdownMenu } from '@/components/atoms'
import { InitiativeCard } from '@/components/molecules/InitiativeCard'
import { ChartLine } from '@/icons'
import { SectionHeading, Pagination } from '@/components/molecules'
import { ProgrammeCard } from '@/components/molecules/ProgrammeCard'
import { Common as CommonLayout } from '@/components/layouts'
import ReactPaginate from 'react-paginate'

import {
  getAllStaticPagesWithSlug,
  getAllInitiativesWithSlug,
  getStaticPage,
} from '../../lib/graphql'
import Link from 'next/link'

const Page: NextPage = ({ page, initiatives, tags }: any) => {
  const router = useRouter()

  const [selectedTag, setSelectedTag] = useState<any>('')

  const [items, setItems] = useState(initiatives || [])
  const [currentItems, setCurrentItems] = useState(initiatives || [])
  const [pageCount, setPageCount] = useState(0)
  const [itemOffset, setItemOffset] = useState(0)
  const itemsPerPage = 5

  useEffect(() => {
    if (initiatives && initiatives.length > 0) {
      setItems(initiatives)
    }
  }, [initiatives])

  useEffect(() => {
    const endOffset = itemOffset + itemsPerPage
    setCurrentItems(items.slice(itemOffset, endOffset))
    setPageCount(Math.ceil(items.length / itemsPerPage))
  }, [itemOffset, itemsPerPage, items])

  useEffect(() => {
    if (selectedTag && selectedTag !== '' && initiatives?.length > 0) {
      const filteredData = initiatives.filter((tag: any) => {
        return tag.node.initiativeTags.nodes.some((deepTag: any) => {
          return deepTag.slug === selectedTag
        })
      })

      setItems(filteredData)
    } else {
      setItems(initiatives)
    }
  }, [selectedTag])

  const handlePageClick = (event: any) => {
    const newOffset = (event.selected * itemsPerPage) % items.length
    setItemOffset(newOffset)
  }

  return (
    <>
      <Head>
        <title>{page.staticPageHeader.heading || `Club Initiatives`} - Tesla Owners UK</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <CommonLayout>
        <div className='container flex pt-[20px] pb-[24px] md:pb-[80px]'>
          <PageHeaderVariant
            heading={page.staticPageHeader.heading}
            image={page.staticPageHeader.banner.mediaItemUrl}
            description={page.staticPageHeader.description}
            imageClassName='!h-[205px] md:!h-[248px] lg:!h-[407px] w-full'
          />
        </div>

        <div className='container'>
          <div className='flex flex-col gap-[24px] pb-[24px] md:flex-row md:items-center md:justify-between md:gap-0 md:pb-[40px] lg:flex-row lg:justify-between lg:pb-[40px]'>
            <h3 className='text-h4 font-700 text-N-800 md:w-[388px] md:text-h3 lg:w-[unset] lg:text-h3'>
              Charity & Programmes
            </h3>
            <div className='md:w-[252px] lg:w-[320px]'>
              <DropdownMenu
                list={tags || []}
                onChange={(e: any) => {
                  setSelectedTag(e.target.value)
                }}
              />
            </div>
          </div>

          <div className='flex flex-col gap-[24px]'>
            {currentItems.map(({ node }: any, index: number) => {
              return (
                <Link key={index} href={`/initiatives/${node.slug}` || ''}>
                  <a>
                    <ProgrammeCard
                      heading={node.title}
                      description={node.pageInitiative.excerpt}
                      image={node.pageInitiativeSidebar.thumbnail.mediaItemUrl}
                      tags={node.initiativeTags.nodes}
                    />
                  </a>
                </Link>
              )
            })}
          </div>

          <div className='w-full max-w-[784px] pb-[40px] pt-[24px] md:pb-[80px] md:pt-[80px]'>
            <ReactPaginate
              breakLabel='...'
              nextLabel={
                <Button appearance='ghost' isSquare>
                  <i className='ri-arrow-right-s-line text-lg' />
                </Button>
              }
              onPageChange={handlePageClick}
              pageRangeDisplayed={5}
              pageCount={pageCount}
              previousLabel={
                <Button appearance='ghost' isSquare>
                  <i className='ri-arrow-left-s-line text-lg' />
                </Button>
              }
              className='pagination'
            />
          </div>
        </div>
      </CommonLayout>
    </>
  )
}

export async function getStaticProps({ preview = false, previewData }: any) {
  const data = await getStaticPage('initiatives')
  const initiatives = await getAllInitiativesWithSlug()

  return {
    props: {
      preview,
      page: data.staticPage,
      initiatives: initiatives.initiatives?.edges,
      tags: initiatives.initiativeTags?.nodes,
    },
    revalidate: 10,
  }
}

export default Page
