import { useState } from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import { Header, Footer, SupplierRibbon } from '@/components/sections'
import { Wrapper, Status } from '@googlemaps/react-wrapper'
import { useRouter } from 'next/router'
import { format, formatDistance, formatRelative, subDays } from 'date-fns'
import {
  Tag,
  ArrowLeft,
  Globe,
  MapPin,
  Phone,
  Mail,
  Bookmark,
  Compass,
  Calendar,
  Clock,
} from 'react-feather'
import { useViewport } from '@/utils'
import { Button, TextField, GoogleMap } from '@/components/atoms'
import { EventHeader } from '@/components/molecules/EventHeader'
import { Common as CommonLayout } from '@/components/layouts'
import Link from 'next/link'
import parseHTML from 'html-react-parser'

import { getEvent } from '../api/get-event'
import { getEvents } from '../api/get-events'

const Page: NextPage = ({ event }: any) => {
  const router = useRouter()
  const { isDesktop, isMobile, isTablet } = useViewport()
  const formattedDate = event?.start_date ? new Date(event?.start_date) : new Date()

  const renderMap = () => {
    if (!event?.map_latitude || !event?.map_longitude) {
      return
    }

    return (
      <Wrapper apiKey='AIzaSyBlPs-kgyXJNDZuMJ36LsVIL4ahfUjrWtI'>
        <GoogleMap
          title={event?.title}
          center={{ lat: Number(event?.map_latitude), lng: Number(event?.map_longitude) }}
        />
      </Wrapper>
    )
  }

  return (
    <>
      <Head>
        <title>{`${event?.title} - ` || 'Event - '} Tesla Owners UK</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.png' />
      </Head>

      <CommonLayout>
        <div className='header-surface relative bg-[url(/images/004.svg)] bg-cover bg-no-repeat'>
          <div className='container flex h-full flex-col'>
            <div className='flex pt-[24px] pb-[16px] md:pt-[40px] md:pb-[52px] lg:py-[50px]'>
              <Link href='/events'>
                <Button
                  appearance='ghost'
                  iconBefore={<ArrowLeft size={20} />}
                  className='h-[unset] px-0 hover:text-B-500'>
                  Back to Events
                </Button>
              </Link>
            </div>
          </div>

          <div className='container rounded-t-[12px] bg-N-10 md:rounded-t-none md:bg-inherit'>
            <EventHeader
              month={format(formattedDate, 'MMM')}
              date={format(formattedDate, 'dd')}
              year={format(formattedDate, 'Y')}
              heading={event?.title}
            />
          </div>
        </div>

        {/* Event details section */}
        <div className='event-details container flex w-full flex-col gap-[24px] pb-[40px] md:gap-[40px] md:pt-[20px] md:pb-[80px] lg:flex-row lg:gap-[48px]'>
          <div className='flex flex-shrink-0 flex-col gap-[24px] lg:w-[784px] lg:gap-[40px]'>
            {event?.banner?.url && (
              <img src={event?.banner?.url} className='mb-[20px] w-full rounded-[8px]' />
            )}

            {parseHTML(event?.description || '')}
          </div>

          {/* Side bar */}
          <div className='flex flex-col md:flex-row-reverse md:gap-[24px] lg:flex-col  lg:gap-[40px]'>
            <div className='flex flex-col gap-[24px]'>
              <div className='flex flex-col gap-[12px]'>
                {/* Address */}
                <div className='flex  items-center gap-[8px]'>
                  <div className='h-[32px] w-[32px] rounded-full bg-N-100 px-[8px] py-[8px] text-N-800'>
                    <MapPin size={16} />
                  </div>

                  <p className='text-md font-500 text-N-600'>
                    {event?.location || 'To be decided'}
                  </p>
                </div>

                {/* Calendar */}
                <div className='flex items-center gap-[8px]'>
                  <div className='h-[32px] w-[32px] rounded-full bg-N-100 px-[8px] py-[8px] text-N-800'>
                    <Calendar size={16} />
                  </div>
                  <p className='text-md font-500 text-N-600'>{event?.date_or_range}</p>
                </div>

                {/* Email */}
                <div className='flex items-center gap-[8px]'>
                  <div className='h-[32px] w-[32px] rounded-full bg-N-100 px-[8px] py-[8px] text-N-800'>
                    <Mail size={16} />
                  </div>
                  <p className='text-md font-500 text-N-600'>{event?.email_address}</p>
                </div>
              </div>

              {isMobile && <div className='flex flex-col'>{renderMap()}</div>}

              <div className='flex'>
                <Link href={`${event?.url}`}>
                  <a target='_blank'>
                    <Button appearance='primary' className='w-full lg:w-[unset]'>
                      Register
                    </Button>
                  </a>
                </Link>
              </div>
            </div>

            {/* Map */}
            {!isMobile && <div className='flex'>{renderMap()}</div>}
          </div>
        </div>
      </CommonLayout>
    </>
  )
}

export async function getStaticProps({ params, preview = false, previewData }: any) {
  const data = await getEvent(params.slug || '')

  return {
    props: {
      preview,
      event: data?.event,
    },
    revalidate: 1,
  }
}

export async function getStaticPaths() {
  const paths = await getEvents()

  return {
    paths: paths?.upcoming.map(({ slug }: any) => `/events/${slug}`) || [],
    fallback: true,
  }
}

export default Page
